generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  name     String
  nickname String
  password String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Campaign       Campaign[]
  UserInCampaign UserInCampaign[]
}

model System {
  id String @id @default(uuid())

  name    String @unique @db.VarChar(50)
  version String @db.VarChar(10)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Campaign   Campaign[]
  Character  Character[]
  SystemStat SystemStat[]
}

model Stat {
  id String @id @default(uuid())

  name        String @unique @db.VarChar(50)
  description String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SystemStat             SystemStat[]
  CharacterPrimaryStat   CharacterPrimaryStat[]
  CharacterSecondaryStat CharacterSecondaryStat[]
}

model SystemStat {
  id String @id @default(uuid())

  systemId String @map("system_id")
  system   System @relation(fields: [systemId], references: [id])

  statId String @map("stat_id")
  stat   Stat   @relation(fields: [statId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Campaign {
  id String @id @default(uuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  systemId String @map("system_id")
  system   System @relation(fields: [systemId], references: [id])

  name        String @db.VarChar(100)
  description String @db.Text

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  UserInCampaign UserInCampaign[]
}

model UserInCampaign {
  id String @id @default(uuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  campaignId String   @map("campaign_id")
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  role String @db.VarChar(50)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Character Character[]
}

model Character {
  id String @id @default(uuid())

  userInCampaignId String         @map("user_in_campaign_id")
  userInCampaign   UserInCampaign @relation(fields: [userInCampaignId], references: [id])

  systemId String @map("system_id")
  system   System @relation(fields: [systemId], references: [id])

  name        String
  nickname    String
  description String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  CharacterPrimaryStat   CharacterPrimaryStat[]
  CharacterSecondaryStat CharacterSecondaryStat[]
}

model CharacterPrimaryStat {
  id String @id @default(uuid())

  characterId String    @map("character_id")
  character   Character @relation(fields: [characterId], references: [id])

  statId String @map("stat_id")
  stat   Stat   @relation(fields: [statId], references: [id])

  statValue Int @map("stat_value")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model CharacterSecondaryStat {
  id String @id @default(uuid())

  characterId String    @map("character_id")
  character   Character @relation(fields: [characterId], references: [id])

  statId String @map("stat_id")
  stat   Stat   @relation(fields: [statId], references: [id])

  statValue Int @map("stat_value")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
